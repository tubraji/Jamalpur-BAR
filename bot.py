import os
from dotenv import load_dotenv
from telegram import Update, Message
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.error import Forbidden

# .env ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶ø
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™
message_map = {}

# /start ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ü§ñ ‡¶¨‡¶ü‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§")

# ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‚Üí ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®
async def user_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    msg = update.message.text

    # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶á‡¶®‡¶´‡ßã‡¶∏‡¶π ‡¶™‡¶æ‡¶†‡¶æ‡¶á
    info = f"üë§ *From:* {user.full_name} (@{user.username})\nüÜî ID: `{user.id}`\n\nüí¨ {msg}"

    try:
        sent: Message = await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=info,
            parse_mode="Markdown"
        )
        message_map[sent.message_id] = user.id
        await update.message.reply_text("‚úÖ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    except Forbidden:
        await update.message.reply_text("‚ùå ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶¨‡¶ü‡¶ï‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá ‡¶∞‡ßá‡¶ñ‡ßá‡¶õ‡ßá‡•§")

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‚Üí ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ (reply ‡¶¶‡¶ø‡¶≤‡ßá)
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.reply_to_message and update.message.chat_id == ADMIN_ID:
        original_msg_id = update.message.reply_to_message.message_id
        reply_text = update.message.text

        user_id = message_map.get(original_msg_id)
        if user_id:
            try:
                await context.bot.send_message(chat_id=user_id, text=f"üëÆ‚Äç‚ôÇÔ∏è ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®:\n{reply_text}")
                await update.message.reply_text("üì§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
            except Forbidden:
                await update.message.reply_text("‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶¨‡¶ü‡¶ï‡ßá ‡¶¨‡ßç‡¶≤‡¶ï ‡¶ï‡¶∞‡ßá ‡¶∞‡ßá‡¶ñ‡ßá‡¶õ‡ßá‡•§")
        else:
            await update.message.reply_text("‚ö†Ô∏è ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")

# ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"‚ö†Ô∏è Error: {context.error}")

# ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø
app = Application.builder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & filters.User(ADMIN_ID), admin_reply))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, user_to_admin))
app.add_error_handler(error_handler)

print("üöÄ Bot is running...")
app.run_polling()
